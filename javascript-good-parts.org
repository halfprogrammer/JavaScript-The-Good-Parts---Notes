* Chapter 1: Good Parts
The good parts of Javascript include
  - functions
  - loose typing
  - dynamic objects
  - expressive object literal notation

Javascript has more in common with Lisp and Scheme than Java and the like
and has *mostly lexical scoping*.

Strong typing is over-hyped and the type of bugs it catches are very trivial.

Javascript uses object literal notation (something like a map) for creating objects.

Uses *prototype inheritance*; no classes and stuff; directly inherits from objects.

One of the bad things about js is that it does not have a notion of namespaces.
So all the globals are put inside the common *global object* namespace because
there is *no linker*. Unfortunately in js globals are fundamental.

Throughout the book a *method* method is used to define new methods.

Function.prototype.method = function (name, func) {
  this.prototype[name] = func;
  return this;
}


* Chapter 2: Grammar
Always use *//* for comments as /* */ can come in regex.

** Numbers
  - Numbers are 64 bit and there is no specific integer type. So 1.0 and 1 are the same.
  - Gives NaN for invalid numeric operations. *NaN == NaN* is *false*.
    To check if the result is a NaN use *isNnN(number)*


** Strings
  - Strings are *16bit unicode* and are *immutable*
  - No character type.

** Statements
  - Each <script> tag creates a compilation unit that is compiled and
    *executed immediately*.
  - Javascript lacks a *linker*. So all globals go into a common namespace.
  - *var* creates local bindings for the function.
  - switch, while, for and do can have optional label to interact with break.
  - Blocks {} in javascripts *DO NOT CREATE NEW SCOPE*. So define variables at the top
    of the function and *NOT IN BLOCKS*
  - False is represented by
     - false
     - null
     - undefined
     - Empty string ''
     - 0
     - NaN
  - Case statements need *not be constants*.
  - for statement has two syntaxes
     1. for(initialize; test; step) {}
     2. for(myvar in obj) {}
  - The second for loop iterates through the *property name string* of an object.
  - *TODO* Find out what obj.hasOwnProperty(variable) is.
  - *do* loop is also available.
  - in *try/catch* catch mandatorially takes a variable name.
  - *throw* throws an exception object which has the following properties
    - has *name* property
    - has *message* property

** Expressions
Nothing new here. Look at the book for precedence table.

** Literals
  - Convenien way of specifying new objects.
  - Name of the properties can be specified as *names* or as *strings*

** Functions
  - They are of the form
  - function name (parameter-list) {body}

    
* Chapter 3: Objects
  - Symple types of js are
    - numbers
    - strings
    - booleans
    - null
    - undefined
  - Objects are *mutable keyed collection*
    - keys can be any string *including an empty string*
    - value can be anything *except undefined*

** Object Literals
  - Object literal is a pair of curly brace surrounding comma separated name/value pair
  - If the key value is not a valid javascript name then it has to be surrounded by "".
    - Eg.
      - var stooge = { "first-name" : "Jerome", "last-name" : "Howard"};

** Retrieval
  - If the key name is a constant and a legal javascript name then the property can be
    accessed as *obj.property*.
  - Otherwise property can be accessed as *obj["property"]*.
  - For nonexistent member an obj["non-existent-property"] returns *undefined*
  - Accessing properties of 'undefined' results in *TypeError* exception.

** Update
  - Updation of existing keys and appending new keys/values happen through assignment
    - obj["property"] = new-value;

** Reference
  - Objects are passed around by reference.

** Prototype
  - Every object is linked to a prototype object from which it inherits its properties
  - All objects are linked to Object.prototype
  - The syntax to specify an object's prototype is messy. This can be simplified by adding
    a *create* function to *Object*

if(typeof Object.create != 'function') // check if Object.create already doesn't exist
{
  Object.create = function (proto) {
    var F = function () {};
    F.prototype = proto;
    return new F();
  };
}

var another_stooge = Object.create(stooge);

  - prototype link has *no effect on updating*.
  - While retrieval if the object does not have a selected property then its prototype will be
    referred. And if the prototype lacks the property then it will traverse further in the
    chain. This is called *delegation*
  - Prototype relationship is dynamic. If a prototype gets a new property then all the objects
    based on that prototype will get the property.

** Reflection
  - Reflection is done primarily with typeof operator.
  - Since during reflection we only care about data and not functions ignore 'function'
  - typeof obj.unknown_property will be *undefined*
  - if the object does not have a property and its prototype has that property even then typeof
    will return correct value
  - If the above is not desirable then use *obj.hasOwnProperty('prototype-property'), which would
    return false

** Enumeration
  - for(name in obj) {} will enumerate through all the properties of an object
    *including functions and prototype properties*.

var name;
for (name in another_stooge) {
  if (typeof another_stooge[name] !== 'function') {
    document.writeln(name + ': ' + another_stooge[name]);
  }
}

  - for-in syntax does not guarantee order of traversal of properties. If ordering is important
    then

var i;
var properties = ['first-name', 'middle-name', 'last-name', 'profession'];
for (i = 0; i < properties.length; i += 1) {
  document.writeln(properties[i] + ": " +
             another_stooge[properties[i]]);
}

** Delete
  - Used to remove a property from an object.
  - If the property being deleted was shadowing prototype's property then prototype's property
    will be visible from then on.
  - delete does not touch the prototype chain

delete obj.property;

** Global Abatement
  - Since it is not advisable to use globals it is advisable to reduce global footprint by creating
    a master object, say MYAPP and putting all the variables you need inside.
    

* Chapter 4: Functions
** Function Objects
   - Functions are objects
   - Functions have two hidden properties (in addition to object properties)
     1. Function's context
     2. Code
   - The prototype of function object is an object whose object.constructor is the function

** Function Literal
   - Function objects are created with function literals

var add = function (a, b) {
  return a + b;
}

   - Function literal has four parts
     1. reserve word *function*
     2. *Optional* function name. If no name is given then it is an *anonymous* function.
     3. Set of parameters
     4. Statements wrapped in the {}
   - Inner functions are allowed in javascript and they have access to their parent's
     parameters and variables

** Invocation
   - In addition to declared parameters, every function receives two additional parameters,
     *this* and *arguments*.
   - The value of *this* is extremely important and is determined by its *invocation pattern*
   - There are four *invocation patterns*
     - Method invocation
     - function invocation
     - constructor invocation
     - apply invocation
   - There is no check for the number of parameters declared by the function and the number
     of parameters used in the funciton call.
     - If in the call there are too few parameters then the extra formal parameters will get
       *undefined* value
     - If there are more parameters than formal parameters then the extra ones are ignored.
     - *No type checking* either

*** Method Invocation Pattern
   - When a function is stored as a property of an object then it is called a *method*.
   - When a method is invoced *this* will be the *object*
   - The binding of this to the object happens very late *during invocation*. This makes
     *this* highly reusable.
   - Methods which get their context from *this* are called *public methods*

var myObject = {
   value: 0,
   increment: function(inc) {
      this.value += typeof inc === 'number' ? inc : 1;
   }
};

myObject.increment();
document.writeln(myObject.value); // 1

myObject.increment(2);
document.writeln(myObject.value); // 3


*** Function Invocation Pattern
  - When a function is not a property of an object then it is invoked as a function.
  - When called like this *this* is bound to the global object.
  - Because of this *bug* the outer functions can't be employed to use inner functions to
    change their state.
  - The following piece of code can serve as an illustration.
    - Why the *wrong* version is wrong
      + In the *wrong* version of code, when myObject.double is called, the *this* variable
	will be reference to the object because of *method invocation pattern*.
      + The inner function *helper()* wants to access the state of the outer function, the
	variabe *value*
      + But when call to *helper* is made *this* will be rebound to the global object.
    - Why the *right* version is right
      + Remember that when the inner function is called only the *this* variable is rebound.
      + In the right version, when a call to myObject.double() is made, the *this* is copied to
	that and this establishes a lexical scope


Wrong:
myObject = {value : 0};

myObject.double = function () {
  var helper = function() {
    this.value += 1;
  };

  helper();
}

Right:
myObject = {value : 0};

myObject.double = function () {
    that = this;
    
    var helper = function() {
    	that.value += 1;
	return this.value;
    };

    return helper();
};

myObject.double();

*** Constructor Invocation Pattern
  - Javascript is a prototypal language. It is class free. Objects inherit properties
    directly from other objects.
  - Javascript, to blur its nature of prototype based language gave a *clumsy* way
    of creating new objects.
  - If a function is called with a *new* prefix then a new object is created with
    its prototype being the same as the function's prototype.
  - *new* operator also changes the behavior of *return*.
  - Functions intended to be used to create objects are called *constructors*.
  - They should not be called without a *new* operator.
  - It is recommended that *CONSTRUCTOR FUNCTIONS SHOULD START WITH A CAPITAL LETTER*
  - This style of use of constructor functions is *not recommended*. Better alternatives
    will be shown in the next chapter.

Eg. How to assign prototype

var myConstructor = function () {};
myConstructor.prototype = some_object;
var newObject = new myConstructor(); // newObject's prototype will be some_object


Example. The value of *this*
var Quo = function(string) {
    this.status = string;
};

Quo.prototype.get_status = function() {
    return this.status;
};

var myQuo = new Quo("confused");
document.writeln(myQuo.get_status());

*** Apply Invocation Pattern
  - apply method allows us to construct an argument array and apply a function to
    that array.
  - It also allows us to explicity set the value of *this* as the first argument.
  - It also allows a form of *duck typing* with apply

Eg. how to *apply* a function
var array = [3, 4];
var sum = add.apply(null, array); //returns 7;

Eg. Ducktyping with apply
//For the definition of Quo look at the previous section
var statusObject = {status : 'OK'};
var status = Quo.prototype.get_status.apply(statusObject); // returns OK

** Arguments
   - A bonus *arguments* array(like) object is passed to functions while invocation.
   - *arguments* contains the full arguments list. It is useful for passing unspecified
     number of arguments.
   - Because of a *design error* *arguments is not a array*. It is an array like object.
     arguments has a *length* property but lacks other array methods.
Eg.

var sum = function () {
  var i, sum = 0;
  for (i = 0; i < arguments.length; i += 1) {
    sum += arguments[i];
  }
};

** Return
  - Functions always return a value. If no return statement is given the value
    *undefined* is returned
  - If a function is called with a *new* operator then *this* (the new object) is returned.

** Exeptions
  - Exception objects should have *name* and *message* properties.
  - You can add any extra properties you like.
  - Since there is no class types, the try block will have only one catch block.
  - We can switch based on *name* of the exception within the catch block.

Eg.
try {
  throw { name : "MyExcpetion", message : "This is my exception"};
} catch (e) {
  document.writeln(e.name + ": " + e.message);
}

** Augmenting Types
  - JS allows types to be *augmented*, similar to monkeypatching in Ruby
  - To provide a new method to all objects, including those already created
    add a new method to Object.prototype.
  - Methods augmented to Function.prototype will be available to all functions.
  - In the following example we add a method 'method' to Function.prototype
  - Since 'method' will be visible to all functions we add new mehods to
    the *function* Number called 'integer'.

Eg. This augments 'method' method to Functions.prototype
Function.prototype.method = function (name, func) {
  this.prototype[name] = func;
}

Number.method('integer', function () {
  return Math[this < 0 ? 'ceiling' : 'floor'](this);
}

document.writeln((-10/3).integer()); //returns 3

NOTE1: Prototypes are common to the entire JS. So before *monkey-patching*
make sure such a method does not already exist
NOTE2: 'for' interacts badly with prototypes. So use hasOwnProperty

** Recursion
  - Since the functions are all anonymous capture the function name in a binding
    and use it for recursion as follows.
  - There is *no Tail Call Optimization* in JS

var functionName = function () {
  //some stuff
  functionName();
}

** Scope
  - *No block scope; only function scope*
  - Best to declare all the variables right at the top.
  - Local variables should be declared as var

Eg. 
var foo = function () {
  var a = 3, b = 5;

  var bar = function () { //local function
    var b = 7, c = 11;

    // (a, b, c) = (3, 7, 11);
    a += b + c;
    
    // (a, b, c) = (21, 7, 11);
  };

  // (a, b, c) = (3, 5, undefined)

  bar();
  
  // (a, b, c) = (21, 5, undefined)
};

** Closure
  - Inner functions have access to outer functions variables, the actual ones
    not any copy.
  - If a function has multiple inner functions then the variable is shared
    across all the functions.
  - If the inner function is returned as the result of computation by
    the outer function then all the bindings (of the outer function) are
    retained.

Example:
var myObject = function () {
  var value = 0;

  return {
    increment: function (inc) {
      value += typeof inc == 'number' ? inc : 1;
    },

    getVlaue: function () {
      return value;
    }
  };
}();  // the outer function is being called

  - It is very important to understand that all the inner functions share
    the variable and do not have a copy of their own
  - The following examples we are trying to assign integers incrementally to
    *nodes* and when they are clicked, we have to display the integer.
    - Why the *bad example* is bad
      + The binding for 'i' is established by the outer function and is shared
	by the outer function and all the inner functions.
      + We iterate over nodes *modifying* i and creating functions.
      + Since all the functions have the shared version of 'i' which finally
	gets set to the length of nodes, that is what get displayed when
	any node gets clicked
    - Why the *correct example* is correct
      + The typical *let over lambda* approach: We create a new function wrapper
	around each of the inner functions and establish a new binding.

Eg. Bad example

var add_the_handlers = function (nodes) {
  var i;
  for (i = 0; i < nodes.length; i += 1) {
    nodes[i].onclick = function (e) {
      alert(i);
    };
  }
};

Eg. Correct Example

var add_the_handlers = function (nodes) {
  var i;
  for (i = 0; i < nodes.length; i+= 1) {
    nodes[i].onclick = function (i) {
      function (e) {
        alert(i);
      }
    }(i);
  };
}

** Callbacks
  - It is generally useful not to make synchronous calls if it is going to freeze
    the browser.
  - Create a function and set it as a callback event.

** Modules
  - Modules can be simulated with closures
  - Suppose we want to have a 'deentityfy' function which will remove html entities
    and replace them with the actual ones (see the example)
  - The following example associates a closure to String.modify. The lexical binding
    of the closure includes 'entity'

Eg.

String.method('deentityfy', function() { // *method* method was add to Function.prototype
  var entity = {
    quot: '"',
    lt:   '<',
    gt:   '>'
  };

  return function() {
    return this.replace(/&([^&;]+);/g, function() (a, b) {
      var r = entity[b];
      return typeof r === 'string' ? r : a;
    });
  }
}());  

** Cascade
  - If there is no useful return value for a function (because it is called for its
    side effects) it is always better to return so that it will be easy to *chain*
    calls.

** Curry
  - Currying :: Create a new function from an existing function by supplying only a few
		arguments
  - Note that the *arguments* object we get in a function call is *not an array*.
    This *design flaw* manifests currying currying because arguments will not have
    array methods
  - This example will use Array.prototype.slice as a workaround.
  - In the following example we add a new method to Function.prototype called 'curry'

Eg.
Function.method('curry', function () {
  var slice = Array.prototype.slice,  //
      args  = slice.apply(arguments),
      that  = this;

  return function () {
    return that.apply(null, args.concat(slice.apply(arguments)));
  };
});

** Memoization
  - Memoization :: Saving return values of a function call and using it later.
  - In general memoization can be done by using function objects.

var functionObj = function () {
  var memoizedValues = []; // Some hash otherwise.
  return memoizedFunction () {
    var retVal;
    if (memoizedValues does not have an entry for this bunch of args) {
      retVal = compute_value();
      //add an entry to memoizedValues;
      return retVal;
    }
  };
}();


* Chapter 5: Inheritance
  - JS is a prototypal language so inheritance happens through objects prototypes.
